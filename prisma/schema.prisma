// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  // user metamask wallet address
  address        String          @unique
  name           String?
  // https://www.prisma.io/docs/concepts/components/prisma-schema/relations/one-to-one-relations
  deposit_wallet Deposit_wallet?
  projects_owned Project[] // implicit m to n
  Donations      Donations[]
}

model Deposit_wallet {
  user_id                Int    @unique
  deposit_wallet_address String @unique
  deposit_wallet_id      String @id @unique
  userId                 Int    @unique
  User                   User   @relation(fields: [userId], references: [id])
}

model Chain {
  id       Int       @id @default(autoincrement())
  chain_id String    @unique
  projects Project[]
}

model Category {
  id       Int       @id @default(autoincrement())
  category String
  projects Project[]
}

model Project {
  created_time DateTime @default(now())

  project_id             Int     @id @default(autoincrement())
  chain_ids              Chain[]
  // addresses
  smart_contract_address String  @unique
  // circle
  deposit_wallet_address String  @unique
  deposit_wallet_id      String  @unique

  status          String
  category        Category[]
  project_details String
  project_title   String

  completion_time DateTime
  goal_time       DateTime
  targeted_amount Decimal
  raised_amount   Decimal

  project_owners User[]
  Donations      Donations[]

  images Project_images[]
  //TODO: add card
}

model Project_images {
  id  Int    @id @default(autoincrement())
  // cdn
  url String @unique

  Project           Project? @relation(fields: [projectProject_id], references: [project_id])
  projectProject_id Int?
}

model Donations {
  id                BigInt  @id @default(autoincrement())
  user_id           User    @relation(fields: [userId], references: [id])
  project_id        Project @relation(fields: [projectProject_id], references: [project_id])
  amount_donated    Decimal
  userId            Int
  projectProject_id Int
}
